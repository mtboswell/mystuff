#include <QString>
// Document parts
// content - words, pictures, whatever - field values
// structure - subject, body, attachments, references/links, etc. - field kinds
// meta - size, datatypes - meta field kinds
// action/events/history - authored by a, sent from a to b at time t, forwarded, edited by b, delegated to c, scheduled, completed, etc. - log field
// associations - explicit or implicit links - generated by index, stored by graph server


/**
 * Data types.
 * Examples:
 * Scalar (time, weight, etc.)
 *     1D Raster V*T (audio, temp log, etc)
 *     2D Raster RGB*XY (image, spreadsheet, etc)
 *     3D Raster RGB*XY*T (video)
 *     2D Vector RGB*(XY*N) (Path, edges)
 *     3D Vector RGB*(XYZ*N) (Solid, faces)
 * Locator (Address, URI/URL)
 * Identifier (UUID, GUID)
 * Descriptor (Human-readable Name)
 * Function
 * Text paragraph/bit
 *     Visual/Functional Description
 *     Instruction/Command/Direction (steps=sequence)
 *     Concept
 *     Chronology (chapters=sequence)
 *     Notes (other structure)
 *     Warning
 *     Side-note (meta structure)
 *
 * Structure
 *     Set
 *     Composition - Components not independent but related and structure shows relations
 *         List/Sequence - before/after
 *         Tree - parent/child
 *         Raster/Table - x/y or before/after/above/below
 *         Document (logical spatial arrangement of other types) - Hybrid of above
 *         Keep lists of ordered pairs? (before/after)(parent/child)(equivalence)(anonymous assoc) NOT (attr/scalar) - scalars are handled differently
 *     Association - Related to independent obj/entity
 *         Subject Predicate Object
 *         Mapping
 *         Translation/equivalence (this is data-driven operation)
 *
 * Algorithm?
 *     State machine?
 *     Operation? E.g. fetch, multiply, combine, send, store, queue
 *     Operators are generic, but operator implementations are specific to left type, operator, right type
 *         e.g. (document, send, emailaddress) is 1 implementation and (document, send, ftp) may be another
 *         e.g. editor = ([text,image,table], assemble, html message) ?
 *
 * Associations by common
 *     Entity
 *     Topic
 *     Goal
 *     Group of People
 *     Group of stuff
 *     Location
 *
 * Domains:
 *     world position/geometry
 *     screen position/geometry
 *     color
 *     plain text
 *     plain number
 *     audio - raw or midi
 */

class Domain
{};

/**
 * Attributes.
 * Examples:
 * Due date/deadline
 * Location
 * start time
 * height
 * width
 * colors
 * temperature
 * durability
 * volume
 * power
 * size
 * shape
 * geometry
 */

class Attribute
{
    public:
        Attribute(QString name);
        ~Attribute();

        QString name;
        QString datatype;
        QString unit;
        int plurality;
        bool transitive;
        QString reverse;


};


